=== GARBAGE COLLECTOR USAGE GUIDE ===

The garbage collector is now integrated into minishell for safe memory management.

AVAILABLE FUNCTIONS:
- t_gc *gc_init(void)                     - Initialize garbage collector
- void *gc_malloc(t_gc *gc, size_t size)  - Allocate memory with tracking
- char *gc_strdup(t_gc *gc, const char *s) - Duplicate string with tracking
- char **gc_split(t_gc *gc, char const *s, char c) - Split string with tracking
- void gc_free_all(t_gc *gc)              - Free all tracked memory
- void gc_destroy(t_gc *gc)               - Destroy garbage collector

USAGE EXAMPLE IN EXECUTION:

```c
void execute_command(t_command *cmd, t_env *env, t_gc *gc)
{
    char **env_array;
    char *command_path;
    
    // Use gc_malloc instead of malloc
    env_array = convert_env_to_array(env, gc);
    
    // Use gc_strdup instead of strdup
    command_path = gc_strdup(gc, "/bin/ls");
    
    // All memory is automatically tracked
    // No need to manually free - gc will handle it
    
    // When command execution is done, gc_free_all() will
    // clean up all memory allocated during this command
}
```

BENEFITS:
- No memory leaks
- Automatic cleanup
- Safe memory management
- Easy to use - just replace malloc/strdup with gc_malloc/gc_strdup

The main function already initializes the GC and cleans it up after each command.
